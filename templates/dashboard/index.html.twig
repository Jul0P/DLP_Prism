{% extends 'base.html.twig' %}

{% block stylesheets %}
    <style>
        header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.5rem 2rem;
            border-bottom: 1px solid var(--border);
            position: sticky;
            top: 0;
            background-color: var(--background);
            z-index: 1000;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .logo {
            width: 200px;
            height: auto;
        }

        h1 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--foreground);
            margin: 0;
        }

        .button-container {
            width: 200px;
            height: auto;
            display: flex;
            align-items: center;
            justify-content: right;
        }

        button {
            padding: 0.75rem;
            background-color: var(--primary);
            color: white;
            border: var(--border);
            border-radius: var(--radius);
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
        }

        button:hover {
            background-color: hsl(12 76% 51%);
        }

        .theme-toggle {
            width: 2.8rem;
            height: 2.8rem;
            background-color: var(--background);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .theme-toggle:hover {
            background-color: var(--accent);
            border-color: var(--accent);
        }

        .theme-toggle img {
            width: 1.3rem;
            height: 1.3rem;
            color: var(--foreground);
        }

        .theme-toggle .sun-icon {
            position: absolute;
            transform: rotate(90deg) scale(0);
            opacity: 0;
            filter: brightness(0) invert(1);
        }

        .theme-toggle .moon-icon {
            min-width: 1.3rem;
            transform: rotate(0deg) scale(1);
            opacity: 1;
        }

        [data-theme="dark"] .theme-toggle .sun-icon {
            transform: rotate(0deg) scale(1);
            opacity: 1;
        }

        [data-theme="dark"] .theme-toggle .moon-icon {
            transform: rotate(-90deg) scale(0);
            opacity: 0;
        }

        h1 {
            transition: background-color 0.5s ease, color 0.5s ease, border-color 0.5s ease, box-shadow 0.5s ease;
        }

        footer {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 40px;
            padding: 0.5rem 2rem;
            background-color: var(--background);
            border-top: 1px solid var(--border);
            box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.05);
            color: var(--foreground);
            flex-shrink: 0;
        }

        footer p {
            margin: 0;
            font-size: 0.875rem;
            font-weight: 400;
            text-align: center;
        }

         /* Styles pour le filtre */
    .filter-container {
        position: relative;
        display: inline-block;
    }

    .filter-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        white-space: nowrap;
        font-weight: 500;
        font-size: 0.75rem;
        height: 2rem;
        padding: 0 0.75rem;
        border: 1px dashed var(--input);
        background-color: var(--background);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        border-radius: var(--radius);
        color: var(--foreground);
        transition: background-color 0.2s, color 0.2s, border-color 0.2s;
        cursor: pointer;
    }

    .filter-button:hover {
        background-color: var(--accent);
        color: var(--accent-foreground);
    }

    .filter-button:focus-visible {
        outline: none;
        box-shadow: 0 0 0 1px var(--ring);
    }

    .filter-button:disabled {
        pointer-events: none;
        opacity: 0.5;
    }

    .filter-button img {
        width: 1rem;
        height: 1rem;
        flex-shrink: 0;
        pointer-events: none;
    }

    .separator {
        display: inline-block;
        width: 1px;
        height: 1rem;
        background-color: var(--border);
        margin: 0 0.5rem;
    }

    .badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        background-color: var(--muted);
        color: var(--muted-foreground);
        border-radius: 0.25rem;
        margin-left: 0.25rem;
    }

    .mobile-only {
        display: inline-block;
    }

    .desktop-badges {
        display: none;
        align-items: center;
        gap: 0.25rem;
    }

    @media (min-width: 1024px) {
        .mobile-only {
            display: none;
        }
        .desktop-badges {
            display: flex;
        }
    }

    .popover-content {
        position: absolute;
        top: calc(100% + 0.4rem);
        left: 0;
        width: 200px;
        background-color: var(--popover);
        color: var(--popover-foreground);
        border: 1px solid var(--border);
        border-radius: var(--radius);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 50;
        padding: 0;
        outline: none;
        animation-duration: 0.2s;
        animation-fill-mode: forwards;
    }

    .popover-content[data-state="open"] {
        animation-name: fade-in, zoom-in;
    }

    .popover-content[data-state="closed"] {
        animation-name: fade-out, zoom-out;
    }

    .popover-content[data-side="bottom"] {
        animation-name: slide-in-from-top, fade-in, zoom-in;
    }

    @keyframes fade-in {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes fade-out {
        from { opacity: 1; }
        to { opacity: 0; }
    }

    @keyframes zoom-in {
        from { transform: scale(0.95); }
        to { transform: scale(1); }
    }

    @keyframes zoom-out {
        from { transform: scale(1); }
        to { transform: scale(0.95); }
    }

    @keyframes slide-in-from-top {
        from { transform: translateY(-0.5rem); }
        to { transform: translateY(0); }
    }

    .command {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: var(--popover);
        color: var(--popover-foreground);
        border-radius: var(--radius);
    }

    .command-input-wrapper {
        display: flex;
        align-items: center;
        border-bottom: 1px solid var(--border);
        padding: 0 0.75rem;
    }

    .command-input {
        flex: 1;
        height: 2.5rem;
        background-color: transparent;
        padding: 0.75rem 0;
        font-size: 0.875rem;
        outline: none;
        color: var(--foreground);
        border: none;
    }

    .command-input::placeholder {
        color: var(--muted-foreground);
    }

    .command-input:disabled {
        cursor: not-allowed;
        opacity: 0.5;
    }

    .command-input-wrapper img {
        width: 1rem;
        height: 1rem;
        margin-right: 0.5rem;
        flex-shrink: 0;
        opacity: 0.5;
    }

    .command-list {
        max-height: 300px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .command-group {
        overflow: hidden;
        padding: 0.25rem;
        color: var(--foreground);
    }

    .command-item {
        position: relative;
        display: flex;
        align-items: center;
        padding: 0.375rem 0.5rem;
        font-size: 0.875rem;
        cursor: default;
        user-select: none;
        border-radius: 0.25rem;
        outline: none;
    }

    .command-item:hover {
        background-color: var(--accent);
        color: var(--accent-foreground);
    }

    .command-item[data-selected="true"] {
        background-color: var(--accent);
        color: var(--accent-foreground);
    }

    .command-item[data-disabled="true"] {
        pointer-events: none;
        opacity: 0.5;
    }

    .command-item img {
        width: 1rem;
        height: 1rem;
        flex-shrink: 0;
        pointer-events: none;
    }

    .command-separator {
        height: 1px;
        background-color: var(--border);
    }

    .checkbox {
        width: 1rem;
        height: 1rem;
        border: 1px solid var(--primary);
        border-radius: 0.25rem;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 0.5rem;
        opacity: 0.5;
    }

    .checkbox.checked {
        background-color: var(--primary);
        color: var(--primary-foreground);
        opacity: 1;
    }

    .checkbox img {
        width: 1rem;
        height: 1rem;
        visibility: hidden;
    }

    .checkbox.checked img {
        visibility: visible;
    }

    .facet-count {
        margin-left: auto;
        width: 1rem;
        height: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: monospace;
        font-size: 0.75rem;
        color: var(--foreground);
    }

    .command-item.reset {
        justify-content: center;
        text-align: center;
    }

    /* Style pour les inputs */
    .input {
        display: flex;
        width: 100%;
        height: 2.25rem;
        border: 1px solid var(--input);
        border-radius: var(--radius);
        background-color: transparent;
        padding: 0.25rem 0.75rem;
        font-size: 1rem;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        color: var(--foreground);
        transition: border-color 0.2s, box-shadow 0.2s;
    }

    .input::placeholder {
        color: var(--muted-foreground);
    }

    .input:focus-visible {
        outline: none;
        border-color: var(--ring);
        box-shadow: 0 0 0 1px var(--ring);
    }

    .input:disabled {
        cursor: not-allowed;
        opacity: 0.5;
    }

    .input[type="file"] {
        border: none;
        background-color: transparent;
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--foreground);
    }

    @media (min-width: 768px) {
        .input {
            font-size: 0.875rem;
        }
    }

    .icon {
        filter: brightness(0) invert(0); /* Par défaut pour le thème clair */
        transition: filter 0.3s ease;
    }

    [data-theme="dark"] .icon {
        filter: brightness(0) invert(1); /* Inverse les couleurs pour le thème sombre */
    }
    </style>
{% endblock %}

{% block title %}Prism - Tableau de bord{% endblock %}

{% block header %}
    <img src="{{ asset('assets/images/logo.png') }}" alt="Logo" class="logo">
    <h1>Tableau de bord</h1>
    <div class="button-container">
        <button class="theme-toggle" id="theme-toggle">
            <img src="{{ asset('assets/icons/sun.svg') }}" alt="Sun Icon" class="sun-icon">
            <img src="{{ asset('assets/icons/moon.svg') }}" alt="Moon Icon" class="moon-icon">
        </button>
    </div>
{% endblock %}

{% block main %}
    <h1>Liste des entreprises</h1>
    <form method="get" action="{{ path('app_dashboard') }}" id="searchForm">
        <input type="text" name="search" value="{{ search }}" placeholder="Rechercher par raison sociale" id="searchInput">
        <button type="submit">Rechercher</button>
    </form>

    <div class="filter-container" id="filter-container">
        <!-- Bouton déclencheur -->
        <button class="filter-button" data-popover-target="popover-content-1" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="popover-content-1" data-state="closed">
            <img src="{{ asset('assets/icons/circle-plus.svg') }}" alt="Circle Plus Icon" class="icon"> {{ title }}
            {% if selectedValues|length > 0 %}
                <span class="separator"></span>
                <span class="badge mobile-only">{{ selectedValues|length }}</span>
                <div class="desktop-badges">
                    {% if selectedValues|length > 2 %}
                        <span class="badge">{{ selectedValues|length }} sélectionnés</span>
                    {% else %}
                        {% for option in options|filter(option => option.value in selectedValues) %}
                            <span class="badge">{{ option.label }}</span>
                        {% endfor %}
                    {% endif %}
                </div>
            {% endif %}
        </button>
        <!-- Contenu du popover -->
        <div class="popover-content" id="popover-content-1" data-state="closed" role="dialog" tabindex="-1">
            <div class="command">
                <div class="command-input-wrapper">
                    <img src="{{ asset('assets/icons/search.svg') }}" alt="Search Icon" class="icon">
                    <input type="text" placeholder="Rechercher..." class="command-input" autocomplete="off" autocorrect="off" spellcheck="false" role="combobox" aria-expanded="true" aria-controls="command-list" />
                </div>
                <div class="command-list" role="listbox" aria-label="Suggestions" id="command-list">
                    <div class="command-group" role="presentation">
                        {% for option in options %}
                            <div class="command-item" role="option" data-value="{{ option.value }}" data-selected="{{ option.value in selectedValues ? 'true' : 'false' }}" data-disabled="false">
                                <div class="checkbox {% if option.value in selectedValues %}checked{% endif %}">
                                    <img src="{{ asset('assets/icons/check.svg') }}" alt="Check Icon" class="icon">
                                </div>
                                <span>{{ option.label }}</span>
                                {% if facets[option.value] is defined %}
                                    <span class="facet-count">{{ facets[option.value] }}</span>
                                {% endif %}
                            </div>
                        {% endfor %}
                    </div>
                    {% if selectedValues|length > 0 %}
                        <div class="command-separator"></div>
                        <div class="command-group">
                            <div class="command-item reset" role="option" data-value="reset">Réinitialiser</div>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    {# Vérifie si le tableau des entreprises contient au moins une entrée avant d'afficher le tableau #}
    {% if entreprises|length > 0 %} 
        <table border="1">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Raison Sociale</th>
                    <th>Adresse</th>
                    <th>Code Postal</th>
                    <th>Ville</th>
                    <th>Téléphone</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                {% for entreprise in entreprises %}
                    <tr>
                        <td>{{ entreprise.id }}</td>
                        <td>{{ entreprise.rs }}</td>
                        <td>{{ entreprise.adresse }}</td>
                        <td>{{ entreprise.cp }}</td>
                        <td>{{ entreprise.ville }}</td>
                        <td>{{ entreprise.tel }}</td>
                        <td>{{ entreprise.mail }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>Aucune entreprise trouvée</p>
    {% endif %}

    {% if is_granted('ROLE_ADMIN') %}
        <p>Seul un admin peut voir ce texte</p>
    {% endif %}
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Gestion de la recherche
            const searchForm = document.getElementById('searchForm');
            const searchInput = document.getElementById('searchInput');
            let timeout = null;

            if (searchInput) {
                searchInput.addEventListener('input', function () {
                    clearTimeout(timeout);
                    timeout = setTimeout(function () {
                        searchForm.submit();
                    }, 1500);
                });
            }

            // Gestion du thème
            const toggleButton = document.getElementById('theme-toggle');
            const html = document.documentElement;

            if (localStorage.getItem('theme') === 'dark') {
                html.setAttribute('data-theme', 'dark');
            } else {
                html.setAttribute('data-theme', 'light');
            }

            if (toggleButton) {
                toggleButton.addEventListener('click', () => {
                    const currentTheme = html.getAttribute('data-theme');
                    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    html.setAttribute('data-theme', newTheme);
                    localStorage.setItem('theme', newTheme);
                });
            }

            // Gestion du filtre
            const buttons = document.querySelectorAll('.filter-button[data-popover-target]');
            let selectedValues = {{ selectedValues|json_encode|raw }}; // Initialisation depuis Twig
            selectedValues = Array.isArray(selectedValues) ? selectedValues.filter(value => typeof value === 'string' && value.trim() !== '') : [];

            // Fonction pour mettre à jour les badges
            function updateBadges() {
                const button = document.querySelector('.filter-button');
                const separator = button.querySelector('.separator');
                const mobileBadge = button.querySelector('.badge.mobile-only');
                const desktopBadges = button.querySelector('.desktop-badges');

                // Supprimer les badges existants
                if (separator) separator.remove();
                if (mobileBadge) mobileBadge.remove();
                if (desktopBadges) desktopBadges.remove();

                // Ajouter les badges si nécessaire
                if (selectedValues.length > 0) {
                    const separator = document.createElement('span');
                    separator.className = 'separator';
                    button.appendChild(separator);

                    const mobileBadge = document.createElement('span');
                    mobileBadge.className = 'badge mobile-only';
                    mobileBadge.textContent = selectedValues.length;
                    button.appendChild(mobileBadge);

                    const desktopBadges = document.createElement('div');
                    desktopBadges.className = 'desktop-badges';
                    if (selectedValues.length > 2) {
                        const badge = document.createElement('span');
                        badge.className = 'badge';
                        badge.textContent = `${selectedValues.length} sélectionnés`;
                        desktopBadges.appendChild(badge);
                    } else {
                        {% for option in options %}
                            if (selectedValues.includes('{{ option.value }}')) {
                                const badge = document.createElement('span');
                                badge.className = 'badge';
                                badge.textContent = '{{ option.label }}';
                                desktopBadges.appendChild(badge);
                            }
                        {% endfor %}
                    }
                    button.appendChild(desktopBadges);
                }
            }

            // Fonction pour soumettre les filtres
            function submitFilters() {
                const validValues = selectedValues.filter(value => typeof value === 'string' && value.trim() !== '');

                const form = document.createElement('form');
                form.method = 'GET';
                form.action = '{{ path('app_dashboard') }}';

                if (searchInput && searchInput.value) {
                    const search = document.createElement('input');
                    search.type = 'hidden';
                    search.name = 'search';
                    search.value = searchInput.value;
                    form.appendChild(search);
                }

                validValues.forEach(value => {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'filters[]';
                    input.value = value;
                    form.appendChild(input);
                });

                document.body.appendChild(form);
                form.submit();
            }

            // Gestion du clic sur le bouton
            buttons.forEach(button => {
                button.addEventListener('click', function (event) {
                    event.stopPropagation();
                    const targetId = this.getAttribute('data-popover-target');
                    const popover = document.getElementById(targetId);

                    if (popover) {
                        const isOpen = popover.getAttribute('data-state') === 'open';
                        popover.setAttribute('data-state', isOpen ? 'closed' : 'open');
                        popover.style.display = isOpen ? 'none' : 'block';
                        this.setAttribute('aria-expanded', !isOpen);

                        // Réinitialiser la barre de recherche et afficher toutes les options
                        if (!isOpen) {
                            const commandInput = popover.querySelector('.command-input');
                            if (commandInput) {
                                commandInput.value = '';
                                filterOptions('');
                            }
                        }
                    }
                });
            });

            // Gestion de la recherche dans le popover
            function filterOptions(query) {
                const commandItems = document.querySelectorAll('.command-item:not(.reset)');
                const lowerQuery = query.toLowerCase().trim();

                commandItems.forEach(item => {
                    const label = item.querySelector('span').textContent.toLowerCase();
                    if (lowerQuery === '' || label.includes(lowerQuery)) {
                        item.style.display = '';
                    } else {
                        item.style.display = 'none';
                    }
                });

                // Toujours afficher le bouton "Réinitialiser" s'il existe
                const resetItem = document.querySelector('.command-item.reset');
                if (resetItem) {
                    resetItem.style.display = '';
                }
            }

            // Écouter les saisies dans la barre de recherche du popover
            const commandInput = document.querySelector('.command-input');
            if (commandInput) {
                commandInput.addEventListener('input', function () {
                    filterOptions(this.value);
                });
            }

            // Gestion du clic sur les options
            const commandItems = document.querySelectorAll('.command-item:not(.reset)');
            commandItems.forEach(item => {
                item.addEventListener('click', function (event) {
                    event.stopPropagation();
                    const value = this.getAttribute('data-value');
                    const checkbox = this.querySelector('.checkbox');

                    if (selectedValues.includes(value)) {
                        selectedValues = selectedValues.filter(v => v !== value);
                        this.setAttribute('data-selected', 'false');
                        checkbox.classList.remove('checked');
                    } else {
                        selectedValues.push(value);
                        this.setAttribute('data-selected', 'true');
                        checkbox.classList.add('checked');
                    }

                    updateBadges();
                    submitFilters();
                });
            });

            // Gestion du clic sur "Réinitialiser"
            const resetItems = document.querySelectorAll('.command-item.reset');
            resetItems.forEach(item => {
                item.addEventListener('click', function (event) {
                    event.stopPropagation();
                    selectedValues = [];
                    document.querySelectorAll('.command-item:not(.reset)').forEach(item => {
                        item.setAttribute('data-selected', 'false');
                        const checkbox = item.querySelector('.checkbox');
                        if (checkbox) checkbox.classList.remove('checked');
                    });

                    const popover = this.closest('.popover-content');
                    if (popover) {
                        popover.setAttribute('data-state', 'closed');
                        popover.style.display = 'none';
                        const button = document.querySelector(`.filter-button[data-popover-target="${popover.id}"]`);
                        if (button) {
                            button.setAttribute('aria-expanded', 'false');
                        }
                    }

                    updateBadges();
                    submitFilters();
                });
            });

            // Ferme le popover lorsqu'on clique à l'extérieur
            document.addEventListener('click', function (event) {
                const popovers = document.querySelectorAll('.popover-content');
                popovers.forEach(popover => {
                    const button = document.querySelector(`.filter-button[data-popover-target="${popover.id}"]`);
                    if (!popover.contains(event.target) && !button.contains(event.target)) {
                        popover.setAttribute('data-state', 'closed');
                        popover.style.display = 'none';
                        if (button) {
                            button.setAttribute('aria-expanded', 'false');
                        }
                    }
                });
            });
        });
    </script>
{% endblock %}